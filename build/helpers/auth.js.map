{"version":3,"sources":["../../_server/helpers/auth.js"],"names":["auth_code","oauth2","authorizationCode","getToken","code","redirect_uri","scope","result","token","accessToken","create","getTokenFromCode","access_token","mdb","callback","graph","Client","init","authProvider","done","client","api","get","emails","mail","userPrincipleName","collection","admins","find","err","stu","equal","student","email","Email","toArray","isAdmin","refresh_token","refresh","refreshToken","credentials","id","secret","auth","tokenHost","authorizePath","tokenPath","require","jwt","exports"],"mappings":";;;;;;;;;;AAwBA;;sFACA,iBAAgCA,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBC,OAAOC,iBAAP,CAAyBC,QAAzB,CAAkC;AACnDC,oBAAMJ,SAD6C;AAEnDK,4BAAc,2CAFqC;AAGnD;AACAC,qBAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,EAA+B,gBAA/B,EAAiD,WAAjD,EAA8D,WAA9D;AAJ4C,aAAlC,CADrB;;AAAA;AACMC,kBADN;AAQQC,iBARR,GAQgBP,OAAOQ,WAAP,CAAmBC,MAAnB,CAA0BH,MAA1B,CARhB;AAAA,6CAUSC,KAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,gB;;;;;;uFAaf,kBAAuBC,YAAvB,EAAqCC,GAArC,EAA0CC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEuBC,MAAMC,MAAN,CAAaC,IAAb,CAAkB;AACrCC,4BAAc,sBAACC,IAAD,EAAU;AACtBA,qBAAK,IAAL,EAAWP,YAAX;AACD;AAHoC,aAAlB,CAFvB;;AAAA;AAEQQ,kBAFR;AAAA;AAAA;AAAA,mBASyBA,OAAOC,GAAP,CAAW,KAAX,EAAkBC,GAAlB,EATzB;;AAAA;AASUf,kBATV;AAUQgB,kBAVR,GAUiB,CAAChB,OAAOiB,IAAR,EAAcjB,OAAOkB,iBAArB,CAVjB;AAAA;AAAA,mBAWuBZ,IAAIa,UAAJ,CAAe,QAAf,CAXvB;;AAAA;AAWQC,kBAXR;AAAA,2BAYIA,OAAOC,IAAP,CAAY,EAAZ,CAZJ;AAAA;AAAA,mBAYkC,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAC7C,+BAAOC,KAAP,CAAaF,GAAb,EAAkB,IAAlB;AACA,mBAAI,IAAIG,OAAR,IAAmBF,GAAnB,EAAuB;AACrB,qBAAI,IAAIG,KAAR,IAAiBV,MAAjB,EAAwB;AACtB,sBAAGO,IAAIE,OAAJ,EAAaE,KAAb,IAAsBX,OAAOU,KAAP,CAAzB,EAAuC;AACrCnB,6BAAS,IAAT;AACA;AACD;AACF;AACF;AACDA,uBAAS,KAAT;AACA;AACD,aAxBL;;AAAA;AAAA;;AAAA,yBAYoBqB,OAZpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA0BIrB,qBAAS,KAAT;AA1BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAesB,O;;;;;;uFA+Bf,kBAA4BC,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACepC,OAAOQ,WAAP,CAAmBC,MAAnB,CAA0B,EAAC2B,eAAeA,aAAhB,EAA1B,EAA0DC,OAA1D,EADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,Y;;;;;AA/Cf;;;;;;AAtBA;AACA;;AAEA,IAAMC,cAAc;AAClBpB,UAAQ;AACN;AACA;AACAqB,QAAI,sCAHE;AAINC,YAAQ;AAJF,GADU;AAOlBC,QAAM;AACJC,eAAW,oCADP;AAEJC,mBAAe,iCAFX;AAGJC,eAAW;AAHP;AAPY,CAApB;;AAcA,IAAM7C,SAAS8C,QAAQ,eAAR,EAAyBrC,MAAzB,CAAgC8B,WAAhC,CAAf;AACA,IAAMQ,MAAMD,QAAQ,cAAR,CAAZ;AACA,IAAIhC,QAAQgC,QAAQ,mCAAR,CAAZ;;AAsDAE,QAAQtC,gBAAR,GAA2BA,gBAA3B;AACAsC,QAAQb,OAAR,GAAkBA,OAAlB;AACAa,QAAQV,YAAR,GAAuBA,YAAvB","file":"auth.js","sourcesContent":["//APP_SCOPES=openid profile offline_access User.Read Mail.Read\r\n//REDIRECT_URI=http://localhost:3000/authorize\r\n\r\nconst credentials = {\r\n  client: {\r\n    //id: 'c85f23a3-d93b-45cf-8f2e-d9d6b7dd547e',\r\n    //secret: 'amzcNLD296#@qeiGYPE48{^',\r\n    id: '15793157-5fd9-435d-b0e1-56bc87bcd66d',\r\n    secret: 'qbbVRC704+gycbLSEQ27~*;',\r\n  },\r\n  auth: {\r\n    tokenHost: 'https://login.microsoftonline.com/',\r\n    authorizePath: 'kcl.ac.uk/oauth2/v2.0/authorize',\r\n    tokenPath: 'kcl.ac.uk/oauth2/v2.0/token'\r\n  }\r\n};\r\n\r\nconst oauth2 = require('simple-oauth2').create(credentials);\r\nconst jwt = require('jsonwebtoken');\r\nvar graph = require('@microsoft/microsoft-graph-client');\r\n\r\n\r\nimport assert from 'assert';\r\n\r\n/* Let the server do this */\r\nasync function getTokenFromCode(auth_code) {\r\n  let result = await oauth2.authorizationCode.getToken({\r\n    code: auth_code,\r\n    redirect_uri: 'https://gentle-refuge-90119.herokuapp.com',\r\n    //redirect_uri: 'http://localhost:8002',\r\n    scope: ['openid', 'email', 'profile', 'offline_access', 'User.Read', 'Mail.Read']\r\n  });\r\n\r\n  const token = oauth2.accessToken.create(result);\r\n\r\n  return token;\r\n}\r\n\r\nasync function isAdmin(access_token, mdb, callback){\r\n\r\n  const client = await graph.Client.init({\r\n    authProvider: (done) => {\r\n      done(null, access_token);\r\n    }\r\n  });\r\n\r\n  try{\r\n    const result = await client.api('/me').get();\r\n    var emails = [result.mail, result.userPrincipleName];\r\n    var admins = await mdb.collection('admins');\r\n    admins.find({}).toArray(await function(err,stu){\r\n      assert.equal(err, null);\r\n      for(var student in stu){\r\n        for(var email in emails){\r\n          if(stu[student].Email == emails[email]){\r\n            callback(true);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      callback(false);\r\n      return;\r\n    });\r\n  } catch(error) {\r\n    callback(false);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function refreshToken(refresh_token){\r\n  return await oauth2.accessToken.create({refresh_token: refresh_token}).refresh();\r\n}\r\n\r\nexports.getTokenFromCode = getTokenFromCode;\r\nexports.isAdmin = isAdmin;\r\nexports.refreshToken = refreshToken;\r\n"]}