{"version":3,"sources":["../_server/socketio.js"],"names":["graph","require","tempData","formData","jwt","ObjectId","socketio","server","mdb","token","gcm","sender","Sender","message","Message","data","key1","collection","find","err","device","equal","send","registrationTokens","deviceId","response","console","error","toArray","callPush","io","on","socket","info","id","emit","isAdmin","isDebug","access_token","isValidUser","passed_access_token","initial","isValidToken","decoded","decode","dateNow","Date","exp","getTime","commands","getTokenFromCode","success","email","id_token","admin","debug","redirect","insert","refresh_token","refreshToken","fs","writeFile","join","__dirname","config","fileName","file","subject","date","history","messages","Client","init","authProvider","done","client","api","get","result","emails","mail","userPrincipleName","$or","students","student","query","$and","$exists","Year","Programme","split","Status","_id","length","deleteOne","then","admins","x","Email"],"mappings":"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","file":"socketio.js","sourcesContent":["import socket from 'socket.io';\r\nimport assert from 'assert';\r\nimport auth from './helpers/auth';\r\nimport data from './helpers/formData.json';\r\nimport path from 'path';\r\nvar graph = require('@microsoft/microsoft-graph-client');\r\n\r\nvar tempData = data.tempData;\r\nvar formData = data.formData;\r\n\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\nvar ObjectId= require('mongodb').ObjectId;\r\n\r\n// This is our socketio function\r\n// server = server listening on Port\r\n// mdb = connection to Database\r\nconst socketio = (server, mdb) => {\r\n\r\n  //global io scope\r\n  var io = socket(server);\r\n\r\n  async function callPush(token){\r\n    var gcm = require('node-gcm');\r\n\r\n    // Set up the sender with your GCM/FCM API key (declare this once for multiple messages)\r\n    var sender = new gcm.Sender('AIzaSyC2b3mcVsGrInLJvfkZxHIOFMH95d8sUKY');\r\n\r\n    // Prepare a message to be sent\r\n    var message = new gcm.Message({\r\n      data: { key1: 'msg1' }\r\n    });\r\n\r\n    // Specify which registration IDs to deliver the message to\r\n    await mdb.collection('devices').find({}).toArray(await function(err,device){\r\n      assert.equal(err, null);\r\n      sender.send(message, { registrationTokens: [device[0].deviceId] }, function (err, response) {\r\n        if (err) console.error('error:' + err);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  //Socket IO handles\r\n  io.on('connection', function(socket){\r\n    console.info('New connection made with ID: ', socket.id);\r\n    socket.emit('message',\r\n      'Call \\'available-commands\\' to view your access rights');\r\n\r\n    // Serverside client variables\r\n    var isAdmin = false;\r\n    var isDebug = false;\r\n    var access_token = null;\r\n\r\n    // Common Functions\r\n    function isValidUser(passed_access_token, initial = false){\r\n      if(access_token && passed_access_token &&\r\n        access_token == passed_access_token &&\r\n        isValidToken(passed_access_token)){\r\n        return true;\r\n      } else if(!initial) {\r\n        socket.emit('message', 'You do not have access to this function');\r\n        return false;\r\n      }\r\n    }\r\n    function isValidToken(passed_access_token){\r\n      if (passed_access_token) {\r\n        var decoded = jwt.decode(passed_access_token);\r\n        var dateNow = new Date();\r\n        if((decoded.exp + '0000') < dateNow.getTime()) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }else{\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //handle available commands event\r\n    socket.on('available-commands', function(data){\r\n      //check if user is connected\r\n      //return array of commands\r\n      var commands = ['obtain-token', 'available-commands'];\r\n      if(isValidUser(data.access_token, true), isAdmin){\r\n        commands = ['remove-token', 'send-message', 'obtain-history',\r\n          'delete-message'];\r\n      }\r\n\r\n      socket.emit('commands', commands);\r\n    });\r\n\r\n    //handle login event\r\n    socket.on('obtain-token', async function(data){\r\n\r\n      //Case when already logged in\r\n      if (isValidUser(data.access_token, true)){\r\n        socket.emit('error', 'you are already logged in');\r\n        return;\r\n      }\r\n\r\n      //Handle when data is passed and not already logged in\r\n      if(data){\r\n\r\n        let token;\r\n        try {\r\n          token = await auth.getTokenFromCode(data.token);\r\n          access_token = token.token.access_token;\r\n\r\n          await auth.isAdmin(access_token, mdb, (success) => {\r\n            token.email = jwt.decode(token.id_token);\r\n            if(success){\r\n              isAdmin = true;\r\n\r\n              socket.emit('message', 'You have logged in as an admin');\r\n              socket.emit('message', 'Obtained Token: listen for \\'token\\' and \\'redirect\\'');\r\n\r\n              socket.emit('token', {...token, admin : true});\r\n              socket.emit('redirect', 'http://localhost:3000');\r\n            } else {\r\n              socket.emit('token', {...token, admin : false});\r\n              socket.emit('message', 'You have logged in as a client.');\r\n            }\r\n          });\r\n        } catch(error){\r\n          socket.emit('message', 'Authentication caused a big error: ' + error);\r\n        }\r\n        if (data.debug) {\r\n\r\n          access_token = data.debug.token;\r\n          isDebug = true;\r\n          isAdmin = data.debug.isAdmin;\r\n          socket.emit('token', access_token);\r\n          socket.emit('admin', isAdmin);\r\n          socket.emit('redirect', data.debug.redirect);\r\n        }\r\n      } else {\r\n        socket.emit('message', 'Please pass a token: { token : token }');\r\n      }\r\n    });\r\n\r\n    socket.on('client-refresh', async function(data){\r\n      if(isValidToken(data.access_token)){\r\n        access_token = data.access_token;\r\n\r\n        await auth.isAdmin(access_token, mdb, (success) => {\r\n          if(success){\r\n            isAdmin = true;\r\n          }\r\n          socket.emit('message', 'You have refreshed');\r\n        });\r\n\r\n        socket.emit('valid-token', true);\r\n      }\r\n    });\r\n\r\n    //handle logout event\r\n    socket.on('remove-token', function(data){\r\n      callPush(data.access_token);\r\n\r\n      if (isValidUser(data.access_token)){\r\n        access_token = null;\r\n        isAdmin = false;\r\n        socket.emit('message', 'Token has been deleted');\r\n      } else {\r\n        if (data.debug) {\r\n          if (data.debug.isAdmin) {\r\n            access_token = null;\r\n            isAdmin = false;\r\n            socket.emit('send-removed-token', access_token);\r\n          }\r\n        }\r\n        socket.emit('message', 'You must obtain a token before you can remove one.');\r\n      }\r\n    });\r\n\r\n    socket.on('submit-deviceid', function(data){\r\n      if(true == true){\r\n        mdb.collection('devices').insert({\r\n          deviceId : data.deviceId,\r\n          email : data.email\r\n        }, function(err){\r\n          assert.equal(err, null);\r\n          console.info('Inserted Device');\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on('request-new-token', async function(data){\r\n      if(data && data.refresh_token){\r\n        var token = await auth.refreshToken(data.refresh_token);\r\n        access_token = token.token.access_token;\r\n\r\n        await auth.isAdmin(access_token, mdb, (success) => {\r\n\r\n          if(success){\r\n            isAdmin = true;\r\n\r\n            socket.emit('message', 'You have logged in as an admin');\r\n            socket.emit('message', 'Obtained Token: listen for \\'token\\' and \\'redirect\\'');\r\n\r\n            socket.emit('token', {...token, admin : true});\r\n            socket.emit('redirect', 'http://localhost:3000');\r\n          } else {\r\n            socket.emit('token', {...token, admin : false});\r\n            socket.emit('message', 'You have logged in as a client.');\r\n          }\r\n        });\r\n\r\n      }\r\n    });\r\n\r\n    //handle send message event\r\n    socket.on('send-message', function(data){\r\n      if(isValidUser(data.access_token) && isAdmin){\r\n        //Commands below are for the push notifications\r\n        /*var query = {\r\n          $and: [\r\n            {$or: queryFormat(data.config.years)},\r\n            {$or: queryFormat(data.config.status)},\r\n            {$or: queryFormat(data.config.programme)},\r\n            {$or: queryFormat(data.config['tutor name'])},\r\n            {$or: queryFormat(data.config['hesa date'])}\r\n          ]\r\n        };\r\n\r\n        var students = mdb.collection('students');\r\n        students.find(query).toArray(function(err,stu){\r\n          assert.equal(err, null);\r\n          var message = {\r\n            subject: data.subject,\r\n            message: data.message,\r\n            priority: data.config.priority,\r\n          };\r\n        });*/\r\n        const fs = require('fs');\r\n        // file.write(data.file,'../public/fileUplods/0001.txt')\r\n        fs.writeFile(path.join(__dirname, '../public/fileUploads/'+data.config.fileName),data.file, (err) => {\r\n          // throws an error, you could also catch it here\r\n          if (err) throw err;\r\n          // success case, the file was saved\r\n          console.info('File saved!');\r\n        });\r\n\r\n\r\n        //Save the message in the database//\r\n        mdb.collection('messages').insert({\r\n          config : data.config,\r\n          subject : data.subject,\r\n          message : data.message,\r\n          file : data.config.fileName,\r\n          date : new Date()\r\n        }, function(err){\r\n          assert.equal(err, null);\r\n\r\n          //If the submission was successful, send out the new messages\r\n          var history = mdb.collection('messages');\r\n          history.find({}).toArray(function(err,messages){\r\n            assert.equal(err, null);\r\n            socket.emit('history', messages);\r\n          });\r\n          console.info('Inserted Message');\r\n\r\n          io.emit('new-message-listener');\r\n        });\r\n\r\n        socket.emit('message-submission', 'The message was successfully sent!');\r\n      } else {\r\n        socket.emit('message-submission', 'The message was not successfully sent, please login with an administrator account!');\r\n      }\r\n      if (data.debug) {\r\n        //Assume the user's token is valid\r\n        if (data.debug.isAdmin) {\r\n          socket.emit('srv-message', { success : true,\r\n            message : 'Correct Permissions'});\r\n        } else {\r\n          console.info('Invalid message');\r\n          socket.emit('srv-message', { success : false,\r\n            message : 'Incorrect Permissions' });\r\n        }\r\n      }\r\n    });\r\n\r\n    //handle view history event\r\n    socket.on('obtain-history', async function(data){\r\n      if(isValidUser(data.access_token)){\r\n        if(isAdmin){\r\n\r\n          //Send all the messages\r\n          var history = mdb.collection('messages');\r\n          history.find({}).toArray(function(err,messages){\r\n            assert.equal(err, null);\r\n            socket.emit('history', messages);\r\n          });\r\n\r\n        } else {\r\n\r\n          //Send only the messages they're allowed to see\r\n          const client = await graph.Client.init({\r\n            authProvider: (done) => {\r\n              done(null, access_token);\r\n            }\r\n          });\r\n\r\n          try{\r\n            const result = await client.api('/me').get();\r\n            var emails = [{'KCL Email': result.mail}, {'KCL Email': result.userPrincipleName}];\r\n            mdb.collection('students').find({ $or: emails}).toArray(function(err, students){\r\n              assert.equal(err, null);\r\n              var student = students[0];\r\n              if(student){\r\n                var query = {\r\n                  $and: [\r\n                    {$or : [{'config.years.0' : { $exists: false }},\r\n                      {'config.years' : '' + student.Year},\r\n                      {'config.years' : 'All'}]},\r\n\r\n                    {$or : [{'config.programme.0' : { $exists: false }},\r\n                      {'config.programme' : student.Programme},\r\n                      {'config.programme' : 'All'}]},\r\n\r\n                    {$or : [{'config.startDate.0' : { $exists: false }},\r\n                      {'config.startDate' : student['HESA Start'].split('/')[2]},\r\n                      {'config.startDate' : 'All'}]},\r\n\r\n                    {$or : [{'config.status.0' : { $exists: false }},\r\n                      {'config.status' : student.Status},\r\n                      {'config.status' : 'All'}]},\r\n\r\n                    {$or : [{'config.tutor.0' : { $exists: false }},\r\n                      {'config.tutor' : student['Tutor name']},\r\n                      {'config.tutor' : 'All'}]},\r\n                  ]\r\n                };\r\n                mdb.collection('messages').find(query).toArray(function(err,messages){\r\n                  assert.equal(err, null);\r\n                  socket.emit('history', messages);\r\n                });\r\n              }\r\n            });\r\n\r\n          } catch(error){\r\n            console.error(error);\r\n          }\r\n\r\n        }\r\n      }else{\r\n        if (data.debug) {\r\n          if (data.debug.isAdmin) {\r\n            socket.emit('srv-message', { success : true,\r\n              message : 'Correct Permissions'});\r\n          } else {\r\n            console.info('Invalid message');\r\n            socket.emit('srv-message', { success : false,\r\n              message : 'Incorrect Permissions' });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on('request-form-data', function(data){\r\n      if(isValidUser(data.access_token)){\r\n        if(isAdmin){\r\n          socket.emit('form-data', formData);\r\n        }\r\n      }\r\n\r\n      if (data.debug) {\r\n        if (data.debug.isAdmin) {\r\n          socket.emit('srv-message', { success : true,\r\n            message : 'Correct Permissions'});\r\n        }else{\r\n          console.info('Not an admin');\r\n          socket.emit('srv-message', { success : false,\r\n            message : 'Incorrect Permissions' });\r\n        }\r\n      }\r\n    });\r\n\r\n    //handle delete message event\r\n    socket.on('delete-message', function(data){\r\n      if(isValidUser(data.access_token) && isAdmin){\r\n        var messages = mdb.collection('messages');\r\n        messages.find({_id : ObjectId(data._id)}).toArray(function(err,message){\r\n          assert.equal(err, null);\r\n          if(message.length > 0){\r\n            messages.deleteOne({_id : message[0]._id}).then(function() {\r\n              socket.emit('message', 'The record was deleted');\r\n              io.emit('new-message-listener');\r\n              var history = mdb.collection('messages');\r\n              history.find({}).toArray(function(err,messages){\r\n                assert.equal(err, null);\r\n                socket.emit('history', messages);\r\n              });\r\n            });\r\n          } else {\r\n            socket.emit('message', 'Could not find that record to delete');\r\n          }\r\n        });\r\n      }\r\n      if (data.debug) {\r\n        if (data.debug.isAdmin) {\r\n          socket.emit('srv-message', { success : true,\r\n            message : 'Correct Permissions'});\r\n        }else{\r\n          console.info('Not an admin');\r\n          socket.emit('srv-message', { success : false,\r\n            message : 'Incorrect Permissions' });\r\n        }\r\n      }\r\n    });\r\n\r\n    //handle delete message event\r\n    socket.on('delete-admin', function(data){\r\n      if(isValidUser(data.access_token) && isAdmin){\r\n        var admins = mdb.collection('admins');\r\n        admins.find({_id : ObjectId(data._id)}).toArray(function(err,admin){\r\n          assert.equal(err, null);\r\n          if(admin.length > 0){\r\n            socket.emit('admin', 'The record was deleted');\r\n            admins.deleteOne({_id : admin[0]._id}).then(function() {\r\n              var x = mdb.collection('admins');\r\n              x.find({}).toArray(function(err,messages){\r\n                assert.equal(err, null);\r\n                socket.emit('admins', messages);\r\n              });\r\n            });\r\n          } else {\r\n            socket.emit('admin', 'Could not find that record to delete');\r\n          }\r\n        });\r\n      }\r\n\r\n      if (data.debug) {\r\n        if (data.debug.isAdmin) {\r\n          socket.emit('srv-message', { success : true,\r\n            message : 'Correct Permissions'});\r\n        }else{\r\n          console.info('Not an admin');\r\n          socket.emit('srv-message', { success : false,\r\n            message : 'Incorrect Permissions' });\r\n        }\r\n      }\r\n    });\r\n\r\n    //handle delete message event\r\n    socket.on('add-admin', function(data){\r\n      if(isValidUser(data.access_token) && isAdmin){\r\n        //Check if the email is kcl\r\n        mdb.collection('admins').insert({\r\n          Email : data.email,\r\n          date : data.date,\r\n        }, function(err){\r\n          assert.equal(err, null);\r\n\r\n          //If the submission was successful, send out the new messages\r\n          var admins = mdb.collection('admins');\r\n          admins.find({}).toArray(function(err,messages){\r\n            assert.equal(err, null);\r\n            socket.emit('admins', messages);\r\n          });\r\n          console.info('Inserted Admin');\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on('obtain-admins', function(data){\r\n      if(isValidUser(data.access_token)){\r\n        if(isAdmin){\r\n          //Send all the messages\r\n          var admins = mdb.collection('admins');\r\n          admins.find({}).toArray(function(err,messages){\r\n            assert.equal(err, null);\r\n            socket.emit('admins', messages);\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n  });\r\n};\r\n\r\nexport default socketio;\r\n"]}